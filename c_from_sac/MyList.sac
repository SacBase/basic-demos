module MyList;

export all;

/*
 *  The SAC standard module List provides lists of integers as an
 *  additional data type offering access functions as usual.
 */

external typedef list;


external list nil();
         #pragma refcounting [0]
         #pragma linkobj "src/MyList/nil.o"
external list cons( int ELEM, list LIST);
         #pragma refcounting [0,2]
         #pragma linkobj "src/MyList/cons.o"
external int  hd( list LIST);
         #pragma refcounting [1]
         #pragma linksign [0,1]
         #pragma linkobj "src/MyList/hd.o"
external list tl( list LIST);
         #pragma refcounting [0,1]
         #pragma linkobj "src/MyList/tl.o"
external bool empty( list LIST);
         #pragma refcounting [1]
         #pragma linksign [0,1]
         #pragma linkobj "src/MyList/empty.o"
external list append( list LIST1, list LIST2);
         #pragma refcounting [0,1,2]
         #pragma linkobj "src/MyList/append.o"
external int  nth( int N, list LIST);
         #pragma linksign [0,1,2]
         #pragma refcounting [2]
         #pragma linkobj "src/MyList/nth.o"
external int  length( list LIST);
         #pragma linksign [0,1]
         #pragma refcounting [1]
         #pragma linkobj "src/MyList/length.o"
external list drop( int N, list LIST);
         #pragma refcounting [0,2]
         #pragma linkobj "src/MyList/drop.o"
external list take( int N, list LIST);
         #pragma refcounting [0,2]
         #pragma linkobj "src/MyList/take.o"
    


