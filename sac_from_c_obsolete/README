
/*****************************************************************************
 * 
 * file:   README
 *
 * description:
 *
 *   This file is to give an overview of the C demo programs of this
 *   directory.
 *   
 *   The directory comes with a Makefile that contains rules
 *   for making executables from the C-source files. Therefore each of the
 *   demo programs <name>.c can be compiled by simply running (GNU-)
 *   "make <name>". The pattern rules provided even comprise an implicit
 *   dependency-checking system. It makes sure that any module needed for
 *   the compilation of a particular program will be compiled on beforehand.
 *   
 *****************************************************************************/



C demo programms using SAC modules and classes:
===============================================
These C demo programs use the SAC interface for C. You can export a
SAC module as a C library and use the SAC functions in your C code.
You can find the sources of the SAC modules used by these demos in the
"src" directory. The compiled and exported libraries you can find in the
"lib" directory, the corresponding headerfile in the "include" directory.
The necessary specialization files for the generic functions in the SAC
modules are also located in the "src" directory.
For further details concerning the SAC interface for C programs have a look
at the "sac_cinterface.h" headerfile in the runtime directory of your
SAC compiler.

1) tutorial.c
This C program demonstrates how a SAC module is used by a C program.
It performs the five simple steps: initialize data, convert c data to
SAC, call to the exported SAC function, convert back SAC result to c
and finish the program.
The program inits a vector and adds it to itself using a simple 
generic SAC function defined in module "tutorialMod.sac".

2) features.c
This C programm shows several features of the SAC interface for C
programs concerning vector and matrix operations. The used functions are
defined in the "featuresMod_fix.sac" and "featuresMod_gen.sac" (functions
with fixed shape and generic functions).
 
3) relax.c
This is a small numerical example that calculates a relaxation. The SAC 
function in "relaxMod.sac" is based on the relax example in the
SAC demo/numerical directory.
The user can select the matrix size and the number of iteration when
calculating the relaxation.

4) overload.c
The SAC module "overloadMod.sac" used in this demo contains generic
functions specialized for the fixed shapes specified in the
"overloadMod.spec" file. The interface allows you to overload functions
of different types, too.

5) usePhm.c
This demo shows the usage of the SAC private heap manager and its debug
statistical output after you run your program. The private heap manager
is used for the SAC- and the C-part of your program.

6) useTwoLibs.c
This program demonstrates how to use two or more SAC modules in your c
programm even if the share global objects.

7) objects.c
This demo shows the usage of a SAC class/object. This example uses the
"IntStack.sac" demo class. The c program uses this int stack as abstract
datatype. There is also an example access to the global IntStack from
a second SAC module.

8) useTypes.c
This demo shows the usage of a user defined type. Here a 'List'-type with
some functions is used to fill, append and print lists. There is no access
to the internal parts of this data type, but the 'list' datatype can be
used as an abtract type with its functions (similar to a class).


