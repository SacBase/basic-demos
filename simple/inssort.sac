use Array: all;
use StdIO: {print};

/*
 * inssort: insertion sort
 * 
 * In this file we have 2 versions of insertion sort:
 *
 * - inssort: the box standard version which does 
 *            in place insertion sort
 *
 * - DPinssort: which also does insertion sort but instead
 *              of trying to make the insertion in place
 *              the insertion is expressed as a data parallel
 *              operation.
 */

#ifndef DP
#define INSSORT inssort
#else
#define INSSORT DPinssort
#endif

#ifndef LARGE
#define N 16
#else
#define N 100000
#endif



int[.] inssort(int[.] A) {
 n = shape(A)[0];

 for (i = 1; i < n; i++) {
   t = A[i];
   j = i;
   while ((j > 0) && (A[j-1] > t)) {
     A[j] = A[j-1];
     j--;
   }
   A[j] = t;
 }

 return( A);
}

int[.] DPinssort(int[.] A) {
 n = shape(A)[0];

 for (i = 1; i < n; i++) {
   t = A[i];
   A = with {
         ( [0] <= j <= [0]) : ( A[j] > t ? t : A[j]);
         ( [1] <= j <= [i]) : ( A[j-1] > t ? A[j-1]
                                           : ( A[j] > t ? t : A[j]));
       } : modarray( A);
 }

 return( A);
}

int main() {
  
  A = with {
        ( . <= iv = [i] <= . ) : 16-i;
      } : genarray( [N], 0 );

#ifndef LARGE
  print( A);
#endif
  B = INSSORT( A);
#ifndef LARGE
  print( B);
#endif

  return(B[10]);
}
